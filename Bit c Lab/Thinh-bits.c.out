/media/sf_CSC208/lab1datalab/datalab/src

CS:APP Data Lab: Grading Sheet for Thinh-bits.c

1. Running './dlc -z' to identify coding rules violations.
/usr/include/stdc-predef.h:1: Warning: Non-includable file <command-line> included from includable file /usr/include/stdc-predef.h.
bits.c:446: Warning: function returns both with and without a value

Compilation Successful (2 warnings)

2. Compiling and running './btest -g' to determine correctness score.
gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c 
bits.c: In function ‘float_i2f’:
bits.c:462:1: warning: control reaches end of non-void function [-Wreturn-type]
btest.c: In function ‘main’:
btest.c:528:9: warning: variable ‘errors’ set but not used [-Wunused-but-set-variable]
     int errors;
         ^

3. Running './dlc -Z' to identify operator count violations.
/usr/include/stdc-predef.h:1: Warning: Non-includable file <command-line> included from includable file /usr/include/stdc-predef.h.
save-bits.c:446: Warning: function returns both with and without a value

Compilation Successful (2 warnings)

4. Compiling and running './btest -g -r 2' to determine performance score.
gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c 
save-bits.c: In function ‘float_i2f’:
save-bits.c:462:1: warning: control reaches end of non-void function [-Wreturn-type]
 }
 ^
btest.c: In function ‘main’:
btest.c:528:9: warning: variable ‘errors’ set but not used [-Wunused-but-set-variable]
     int errors;
         ^


5. Running './dlc -e' to get operator count of each function.

Correctness Results	Perf Results
Points	Rating	Errors	Points	Ops	Puzzle
1	1	0	2	4	bitAnd
2	2	0	2	3	getByte
3	3	0	2	6	logicalShift
4	4	0	2	38	bitCount
4	4	0	2	8	bang
1	1	0	2	1	tmin
2	2	0	2	6	fitsBits
2	2	0	2	7	divpwr2
2	2	0	2	2	negate
3	3	0	2	7	isPositive
3	3	0	2	16	isLessOrEqual
4	4	0	2	29	ilog2
2	2	0	2	5	float_neg
0	4	1	0	2	float_i2f
4	4	0	2	10	float_twice

Score = 65/71 [37/41 Corr + 28/30 Perf] (144 total operators)

Part 4: Grade

Correctness: 		     / 41

Performance: 		     / 30

Coding Style:		     / 5

             		__________

Total:       		     / 76

Part 5: Original ./handin/Thinh-bits.c file

/* 
 * CS:APP Data Lab 
 * 
 * Name: Thinh Pham, userid: tpham14, student ID: 244079
 * 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting an integer by more
     than the word size.

EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }

FLOATING POINT CODING RULES

For the problems that require you to implent floating-point operations,
the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.
You can use arbitrary integer and unsigned constants.

You are expressly forbidden to:
  1. Define or use any macros.
  2. Define any additional functions in this file.
  3. Call any functions.
  4. Use any form of casting.
  5. Use any data type other than int or unsigned.  This means that you
     cannot use arrays, structs, or unions.
  6. Use any floating point data types, operations, or constants.


NOTES:
  1. Use the dlc (data lab checker) compiler (described in the handout) to 
     check the legality of your solutions.
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)
     that you are allowed to use for your implementation of the function. 
     The max operator count is checked by dlc. Note that '=' is not 
     counted; you may use as many of these as you want without penalty.
  3. Use the btest test harness to check your functions for correctness.
  4. Use the BDD checker to formally verify your functions
  5. The maximum number of ops for each function is given in the
     header comment for each function. If there are any inconsistencies 
     between the maximum ops in the writeup and in this file, consider
     this file the authoritative source.

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the BDD checker to formally verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
/* wchar_t uses Unicode 8.0.0.  Version 8.0 of the Unicode Standard is
   synchronized with ISO/IEC 10646:2014, plus Amendment 1 (published
   2015-05-15).  */
/* We do not support C11 <threads.h>.  */
/* 
 * bitAnd - x&y using only ~ and | 
 *   Example: bitAnd(6, 5) = 4
 *   Legal ops: ~ |
 *   Max ops: 8
 *   Rating: 1
 */
int bitAnd(int x, int y) {
  //Very similar to DeMorgan's Law expression
  return ~ (~x | ~y);
}
/* 
 * getByte - Extract byte n from word x
 *   Bytes numbered from 0 (LSB) to 3 (MSB)
 *   Examples: getByte(0x12345678,1) = 0x56
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 6
 *   Rating: 2
 */
int getByte(int x, int n) {
  //n << 3 shift left 3 units (add 3 more 0s)
  //x >> will shift right to n*(2^3) bits
  //0xFF is the two's compliment mask and applied to return the least significant byte
  int binary = 0xFF;
  return ((x >> (n << 3)) & binary);
}
/* 
 * logicalShift - shift x to the right by n, using a logical shift
 *   Can assume that 0 <= n <= 31
 *   Examples: logicalShift(0x87654321,4) = 0x08765432
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3 
 */
int logicalShift(int x, int n) {
  //(1 << 31) will shift left 1 = 1000...(31 zeros)
  //(1 << 31) >> n means fill 1s in n spaces from the MSB
  //((1 << 31) >> n) << 1 means to keep the first digit 
  int mask = ((1 << 31) >> n) << 1;
  //(x >> n) will right shift x by n
  //(x >> n) & ~mask means 0s out the first n values
  return (x >> n) & ~mask;
}
/*
 * bitCount - returns count of number of 1's in word
 *   Examples: bitCount(5) = 2, bitCount(7) = 3
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 40
 *   Rating: 4
 */
int bitCount(int x) {
  //variables
  int sum = 0;
  //The first half encompass the 2 least significant bytes, second half encompasses the final bytes
  int mask = 0x1 | (0x1 << 8) | (0x1 << 16) | (0x1 << 24);
  int binary = 0xFF;

  //Count the bits a byte at a time, then add up the parts of bits
  //Sum will hold the number of 1 bits in the bit string
  //Computes the number of 1 bits within the first four bits
  sum = (x & mask);
  sum += ((x >> 1) & mask);
  sum += ((x >> 2) & mask);
  sum += ((x >> 3) & mask);
  sum += ((x >> 4) & mask);
  sum += ((x >> 5) & mask);
  sum += ((x >> 6) & mask);
  sum += ((x >> 7) & mask);
  //At this point, sum represents the number of 1 bits within the first 4 bits.
  //Returns count of number of 1's in word
  return (sum & binary) + ((sum >> 8) & binary) + ((sum >> 16) & binary) + ((sum >> 24) & binary);
}
/* 
 * bang - Compute !x without using !
 *   Examples: bang(3) = 0, bang(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
int bang(int x) {
  int binary = 0x01;
  //either 0 or 1 depending on the sign
  int signOfX = (x >> 31);
  // this should be 1 or 0.
  int InverseSignOfX = (((~x) + 1) >> 31);
  //one of a or b will be 1 if x is not 0
  return (((signOfX & binary) | (InverseSignOfX & binary)) ^ binary);
}
/* 
 * tmin - return minimum two's complement integer 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 4
 *   Rating: 1
 */
int tmin(void) {
  //binary representing 1000 0000
  int binary = 0x80;
  //if x shifted to the left 24 bits will produce the smallest bit
  return (binary << 24);
}
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 <= n <= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int fitsBits(int x, int n) {
  //variables
  int shift;
  int convert;

  // see if you shift x by n bits then back by n bits if its still equal
  shift = 33 + ~n;
  convert = (x << shift) >> shift;
  // a ^ b = 0 when a == b
  return !(x ^ convert);
}
/* 
 * divpwr2 - Compute x/(2^n), for 0 <= n <= 30
 *  Round toward zero
 *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
int divpwr2(int x, int n) {
  // Something is needed to account for x >> n if positive and x >> n + 1 if negative

  // Subtract 1 from 2^n
  // This accounts for the need to + 1
  int mask = (1 << n) + ~0;

  // positive: result = 0
  // negative: result = (2^n)-1
  int result = (x >> 31) & mask;

  // Adds 1 if x was negative
  // Adds 0 if x was positive
  return (x + result) >> n;
}
/* 
 * negate - return -x 
 *   Example: negate(1) = -1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 5
 *   Rating: 2
 */
int negate(int x) {
  // Use the fact that -x = ~x + 1 in twos complement.
  return (~x) + 1;
}
/* 
 * isPositive - return 1 if x > 0, return 0 otherwise 
 *   Example: isPositive(-1) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 3
 */
int isPositive(int x) {
  //Use 1<<31 to mask sign bit. Use !x to test for x=0.
  // gets the sign bit, and checks returns 1 if its sign bit is 0 and x != 0
  int testing = ((x & (1 << 31)) >> 31) & 1;
  return (testing ^ 1) ^ (!x);
}
/* 
 * isLessOrEqual - if x <= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {
  //variables
  int posOrNeg;
  int inverse;
  int diff;
  int equal;
  int result;
  //either postive or negative when i use exclusive or (XOR)
  posOrNeg = x ^ y;
  //to inverse use Not operator
  inverse = ~posOrNeg;
  //different
  diff = y + (~x + 1);
  //equal
  equal = !(x ^ y);
  //after this point, need to over ride most of the varibles
  //to determine if the value is either postive or negative
  posOrNeg = posOrNeg & x;
  //inverse different
  diff = ~diff;
  //inverse cases
  inverse = inverse & diff;
  inverse = inverse | posOrNeg;
  inverse = inverse & (1 << 31);
  //result
  result = (!!inverse) | (equal);
  return result;
}
/*
 * ilog2 - return floor(log base 2 of x), where x > 0
 *   Example: ilog2(16) = 4
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 90
 *   Rating: 4
 */
int ilog2(int x) {
  //variables
  int mask1 = 0xFF << 24 | 0xFF << 16;
  int mask2 = 0xFF << 8;
  int mask3 = 0xF0;
  int mask4 = 0x0C;
  int result = 0;
  int shift;

  //calculates the log by checking the first four bytes, then two, then 1 then 4 bits ...
  // if anythings in top 4 bytes, result is at least 16
  result = !!(x & mask1) << 4;

  // bring the top bits down, if there is anything up there  
  x >>= result; 

  // check next two bytes, if there is anything there, at least 8 more  
  shift = !!(x & mask2) << 3; 
  x >>= shift;
  result += shift;

  // check the next byte, if there is anything there, at least 4 more
  shift = !!(x & mask3) << 2;
  x >>= shift;
  result += shift;

  // check the next 4 bits, if there is anything there, at least 2 more
  shift = !!(x & mask4) << 1;
  x >>= shift;
  result += shift;

  // check the second to last bit, if there is anything there, finally 1 more
  result += (x >> 1);

  // can disregard the last bit, because it wont matter to log
  return result;
}
/* 
 * float_neg - Return bit-level equivalent of expression -f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representations of
 *   single-precision floating point values.
 *   When argument is NaN, return argument.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 10
 *   Rating: 2
 */
unsigned float_neg(unsigned uf) {
  //variables;
  unsigned NaN = 0x7FC00000;
  unsigned infinity = 0xFFC00000;

  //Flips the sign if uf isn't inf or NaN
  if (uf == NaN || uf == infinity) {
  return uf;
  }
  else {
  return uf ^ (1 << 31);
  }
}
/* 
 * float_i2f - Return bit-level equivalent of expression (float) x
 *   Result is returned as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point values.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_i2f(int x) {
  //variables
  
  //special case 1 0x0
  if (x == 0) {
  return x;
  }
  
  //special case 2 0x80..
  if (x == 0x80000000 ) {
  return 0xCF000000;
  }
  
  //I solved the 2 special cases and the rest I have no idea. 
  // :D too hard!!!!

}
/* 
 * float_twice - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_twice(unsigned uf) {
  //variables
  unsigned exponent = (uf >> 23) & 0xFF;
  unsigned sign = uf & 0x80000000;
  unsigned fraction = uf & 0x007FFFFF;

  //NaN or infinity case
  if (exponent == 0xFF) {
    return uf;
  }
  //hint: add 1 to the exponent, so i did. thank you
  if (exponent) {
    exponent++;
  }
  //if it's in denormal form, shift left by or equal 1
  else {
    fraction <<= 1;
  }
  return (sign) | (exponent << 23) | (fraction);
}
